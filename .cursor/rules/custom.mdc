---
description: GitLab 周报生成器项目开发规范
globs: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', '**/*.less', '**/*.css']
alwaysApply: true
---
---
description: GitLab 周报生成器项目开发规范
globs: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', '**/*.less', '**/*.css']
alwaysApply: true
---

- 修改完成后运行npm run build检查错误
- 不需要运行npm run dev

# GitLab 周报生成器开发规范

## 🎨 UI/UX 设计规范

### 主题系统
- 所有 UI 组件必须同时兼容深色/浅色/系统主题模式
- 使用 CSS 变量定义主题色彩，确保主题切换的一致性
- 遵循 macOS 设计语言，注重简洁性和用户体验

### 响应式设计
- 优先考虑PC端适配
- 使用 flexbox 和 grid 布局，避免固定宽度和高度
- 确保在不同屏幕尺寸下的良好可用性

## 📝 代码规范

### TypeScript 规范
- 启用严格模式，所有变量和函数必须有明确的类型定义
- 优先使用接口（interface）而非类型别名（type）定义对象结构
- 使用泛型提高代码复用性，避免 any 类型
- 导出的组件和函数必须添加 JSDoc 注释

### React 组件规范
- 使用函数组件和 Hooks，避免类组件
- 组件名称使用 PascalCase，文件名与组件名保持一致
- Props 接口命名格式：`{ComponentName}Props`
- 使用 React.FC 类型定义函数组件
- 合理使用 useMemo、useCallback 优化性能

### 导入规范
- 使用绝对路径导入（@/ 别名），避免相对路径
- 按以下顺序组织导入：
  1. React 相关导入
  2. 第三方库导入
  3. 项目内部导入（@/ 开头）
  4. 相对路径导入
  5. 类型导入（使用 type 关键字）
- 及时清理未使用的导入

### 样式规范
- 使用 Less 预处理器，充分利用变量、混合和嵌套功能
- 组件样式文件命名：`index.less`
- 使用 BEM 命名规范或模块化 CSS
- 避免使用 !important，通过合理的选择器优先级解决样式冲突

## 🔧 开发实践

### 时间处理
- 统一使用当前时间获取，避免硬编码时间值
- 时间格式化使用项目中定义的常量 DATE_FORMAT
- 处理时区问题，确保时间显示的准确性

### 错误处理
- 所有异步操作必须包含错误处理逻辑
- 使用统一的错误提示机制
- API 调用失败时提供有意义的错误信息

### 性能优化
- 使用 React.memo 包装纯组件
- 合理使用 useMemo 和 useCallback 避免不必要的重渲染
- 大列表使用虚拟滚动或分页加载
- 图片资源优先使用 SVG 格式

### 注释规范
- 复杂业务逻辑必须添加详细注释
- 使用中文注释，确保团队成员理解
- API 接口和工具函数必须有完整的 JSDoc 注释
- 组件 Props 接口必须添加注释说明

## 🚀 ES6+ 特性使用

### 推荐使用的现代语法
- 解构赋值：简化对象和数组的取值操作
- 箭头函数：简化函数定义，注意 this 绑定
- 模板字符串：字符串拼接和多行字符串
- 可选链操作符（?.）：安全访问嵌套属性
- 空值合并操作符（??）：处理 null/undefined 值
- 异步函数（async/await）：替代 Promise.then 链式调用

### 数组和对象操作
- 使用扩展运算符（...）进行数组和对象的复制和合并
- 优先使用 map、filter、reduce 等函数式方法
- 使用 Array.from、Object.keys/values/entries 进行数据转换

## 📁 文件组织

### 目录结构
- 组件目录必须包含 index.tsx 和 index.less
- 复杂组件可以拆分为多个子组件文件
- 类型定义统一放在 types 目录下
- 常量定义统一放在 constants 目录下

### 命名规范
- 文件名使用 kebab-case 或 camelCase
- 组件文件使用 PascalCase
- 工具函数文件使用 camelCase
- 常量使用 UPPER_SNAKE_CASE

## 🔍 代码质量

### 代码检查
- 提交前必须通过 ESLint 检查
- 使用 Prettier 统一代码格式
- TypeScript 编译必须无错误和警告
- Stylelint 检查样式代码规范

### 测试要求
- 暂时不需要考虑任何测试

### 性能监控
- 关注包体积大小，避免引入不必要的依赖
- 监控运行时性能，及时优化性能瓶颈
- 使用浏览器开发工具分析性能问题

## 🔒 安全规范

### API 安全
- 敏感信息（API Key、Token）不得硬编码在代码中
- 使用环境变量或安全的配置管理方式
- API 调用必须包含适当的错误处理和超时设置

### 数据处理
- 用户输入必须进行验证和清理
- 避免 XSS 攻击，正确处理用户生成的内容
- 敏感数据不得在控制台输出或日志中暴露

## 📚 文档规范

### 代码文档
- 每个模块必须有清晰的功能说明
- 复杂算法和业务逻辑必须有详细注释
- API 接口必须有完整的参数和返回值说明

### 提交信息
- 使用 Conventional Commits 规范
- 提交信息必须清晰描述变更内容
- 重大变更必须在提交信息中说明影响范围

---

遵循以上规范，确保代码质量和项目的可维护性。如有疑问，请参考项目中的现有代码实现。